name: CICD with Auto Release

on:
  push:
    branches: [ master ]

permissions:
  contents: write

jobs:
  auto-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.actor != 'github-actions'
    concurrency:
      group: auto-version-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update version
        id: update-version
        run: |
          CURRENT_VERSION=$(grep 'VERSION' version.cpp | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"

          SLIDE1=$(echo $CURRENT_VERSION | cut -d. -f1)
          SLIDE2=$(echo $CURRENT_VERSION | cut -d. -f2)
          SLIDE3=$(echo $CURRENT_VERSION | cut -d. -f3)

          NEW_SLIDE3=$((SLIDE3 + 1))
          NEW_SLIDE2=$SLIDE2
          NEW_SLIDE1=$SLIDE1

          if [ $NEW_SLIDE3 -ge 10 ]; then
            NEW_SLIDE3=0
            NEW_SLIDE2=$((SLIDE2 + 1))

            if [ $NEW_SLIDE2 -ge 10 ]; then
              NEW_SLIDE2=0
              NEW_SLIDE1=$((NEW_SLIDE1 + 1))
            fi
          fi

          NEW_VERSION="$NEW_SLIDE1.$NEW_SLIDE2.$NEW_SLIDE3"
          echo "New Version: $NEW_VERSION"

          sed -i "s/const char\* VERSION = \".*\"/const char* VERSION = \"$NEW_VERSION\"/" version.cpp

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit new version and push tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Используем встроенный токен
        run: |
          git config user.email "github-actions@github.com"
          git config user.name "GitHub Actions"
          git add version.cpp
          git commit -m "CI: Auto-update version to $NEW_VERSION" || echo "No changes to commit"
          git tag -a "v$NEW_VERSION" -m "Auto-generated release tag v$NEW_VERSION"
          git push origin HEAD:master
          git push origin "v$NEW_VERSION"

    outputs:
      new_version: ${{ steps.update-version.outputs.new_version }}

  build-and-release:
    needs: auto-version
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact-name: linux-build
            build-dir: build
          - os: windows-latest
            artifact-name: windows-build
            build-dir: build/Release
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.25.x'

      - name: Configure CMake
        run: cmake -B ${{ matrix.build-dir }} -DCMAKE_BUILD_TYPE=Release

      - name: Build project
        run: cmake --build ${{ matrix.build-dir }} --config Release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.build-dir }}/

  create-release:
    needs: 
      - auto-version
      - build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: artifacts/linux

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: artifacts/windows

      - name: Create Release on GitHub
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.auto-version.outputs.new_version }}
          name: Release v${{ needs.auto-version.outputs.new_version }}
          body: |
            Автоматический релиз. Собрано с помощью CMake.
            Версия: ${{ needs.auto-version.outputs.new_version }}
            Сборка включает артефакты для Linux и Windows.
          files: |
            artifacts/linux/*
            artifacts/windows/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Явно передаем токен